DEFINE GAME
[
	DEFINE MANAGER EntityManager
	[
		SET priority = 1;
		SET receiver = true;
		SET extra = 
		{
			setMethod = "EntityManager",
		}
		AS ManagerData;
	]
	
	DEFINE MANAGER PhysicsManager
	[
		SET priority = 2;			
		SET debug = 
		{
			//imports adicionales, solo usar con debug
			imports       = 
			{
				@'com.badlogic.gdx.physics.box2d.Box2DDebugRenderer',
				@'com.badlogic.gdx.physics.box2d.World',
				@'static com.apollo.managers.PhysicsManager.*',
			},
			fields        = 
			{
				@'OrthographicCamera debugCamera',
				@'Box2DDebugRenderer debugRender = new Box2DDebugRenderer(true,true,true,true,true,true)',
				@'World world',
			},
			preInitialize = 
			{
				@'debugCamera = new OrthographicCamera()',
				@'debugCamera.setToOrtho(false,w*SCALE,h*SCALE)'		
			},
			postInitialize = 
			{
				@'world = container.getManager(PhysicsManager.class).getb2World()',				
			},			
			postUpdate    = 
			{
				@'debugCamera.position.set(camera.position).scl(SCALE)',
				@'debugCamera.update()',
				@'debugRender.render(world,debugCamera.combined)'
			},			
		}
		AS ManagerData;		
	]
	
	DEFINE MANAGER RenderManager
	[
		SET priority = 3;
		
		SET managerClass = "StageRenderManager";
		SET extra = 
		{
			preInitialize = 
				{
					@'batch = new SpriteBatch()'					
				},
			postInitialize=
			{
				@'camera = container.getManager(StageRenderManager.class).getCamera()'
			},
			params        = {@'w',@'h',@'batch'},			
			fields        = 
				{					
					@'SpriteBatch batch',
					@'Camera camera'
				}			
		}
		AS ManagerData;
	]
	DEFINE BEHAVIOR CircleBody
	[	
		SET group = "body";
	]
	DEFINE BEHAVIOR PlatformBody
	[	
		SET group = "body";
	]
	DEFINE BEHAVIOR BoxBody
	[	
		SET group = "body";
	]
	DEFINE BEHAVIOR Texture
	[
	]
	DEFINE BEHAVIOR Timer
	[
	]
	
	DEFINE ASSET Texture
	[
		SET className      = "Texture"; //el nombre de esta clase...
		SET classParameter = "TextureParameter"; //nombre de los parametros								
	]
	DEFINE ASSET Atlas
	[
		SET className = "TextureAtlas";
	]
	DEFINE ASSET Sprite
	[
		SET className      = "Sprite";
		SET classParameter = "AnimationParameter"; 
		SET groupName      = "textureAtlasPath";
	]
	DEFINE ASSET TileMap
	[
		SET className      = "TiledMap";		
	]
	DEFINE ASSET Terrain2D
	[
		SET className      = "Terrain2D";
		SET classParameter = "TerrainParameter";
	]
	DEFINE ASSET EntitySpawn
	[
		SET className     = "EntitySpawn";
		SET classParamter = "EntitySpawnParamter";
	]
	DEFINE ASSET Sound
	[
	]
	DEFINE ASSET Music
	[
	]	
	DEFINE MESSAGE Key
	[
		SET press   = 
		{ 
			name = "press", valueReplace = "Input.Keys.%s == key", params = "int key", attachInputProcessor = true, message = current
		} AS MessageMethod;
		SET release = 
		{			
			name="release", valueReplace="Input.Keys.%s == key", params = "int key", attachInputProcessor = true, message = current
		} AS MessageMethod;
	]
	
	DEFINE MESSAGE Camera
	[
		//ADD METHOD follow(Entity entity);
		SET follow   = 
		{ 
			name = "follow", params = "Entity entity", message = current
		} AS MessageMethod;
		SET unfollow = 
		{			
			name = "unfollow", params="", message = current
		} AS MessageMethod;
	]
	
	DEFINE MESSAGE Mouse
	[
		SET pressButton   = 
		{ 
			name = "pressButton", valueReplace = "Input.Buttons.%s == button", params = "int button, int x, int y", attachInputProcessor = true, message = current
		} AS MessageMethod;
		SET releaseButton = 
		{			
			name="releaseButton", valueReplace="Input.Buttons.%s == button", params = "int button, int x,int y", attachInputProcessor = true, message = current
		} AS MessageMethod;
		SET move = 
		{			
			name="move", params = "int x, int y", attachInputProcessor = true, message = current
		} AS MessageMethod;
		SET dragged = 
		{			
			name="dragged", params = "int x, int y", attachInputProcessor = true, message = current
		} AS MessageMethod;
	]
	
	DEFINE MESSAGE Translate
	[
		SET translate    = { name = "translate",  params = "float x, float y", message = current } AS MessageMethod;
		SET rotate       = { name = "rotate",     params = "float grad", message = current }   AS MessageMethod;		
	]
	
	DEFINE MESSAGE Move
	[		
		SET angularSpeed = { name = "angularSpeed", params = "float w", message = current} AS MessageMethod;
		SET speed        = { name = "speed",        params = "float x, float y", message = current} AS MessageMethod;
		SET forward      = { name = "forward",      params = "float units", message = current} AS MessageMethod;
	]
	
	DEFINE MESSAGE Platform
	[
		SET jump = { name = "translate", params = "float vel", message = current } AS MessageMethod;
		SET move = { name = "move",      params = "float vel", message = current} AS MessageMethod;
	]
	
	DEFINE MESSAGE Contact
	[		
		SET begin = { name = "begin", valueReplace="other instanceof %s", params = "Entity other, Fixture otherFix, Fixture ownFix, Contact contact", message = current } AS MessageMethod;
		SET end   = { name = "end",   valueReplace="other instanceof %s", params = "Entity other, Fixture otherFix, Fixture ownFix, Contact contact", message = current } AS MessageMethod;
	]
	
	DEFINE MESSAGE Gun
	[
		SET shot = { name = "shot", params = "float rot, float dist, float vel", message = current} AS MessageMethod;
		SET reload = { name = "reload", params = "int ammo", message = current}  AS MessageMethod;
		SET changeBullet = { name = "changeBullet", params = "String entityName", message = current} AS MessageMethod;
	]
	
	DEFINE MESSAGE AutoGun
	[
		SET SetDelayShot = { name = "setDelayShot", params = "int delay", message = current} AS MessageMethod;
		SET SetShot      = { name = "setShot", params = "float rot, float dist, float vel", message = current} AS MessageMethod;
	]
	
	DEFINE MESSAGE Entity
	[
		//como deberia quedar?
		SET factory = true;
		//ADD METHOD init();
		//ADD METHOD deinit();
		//sin embargo para poder utilzar este add, es necesario cambiar unas cosas ya que el ADD está diseñado solo para agregar defines.
		SET init   = { name = "init", params = "", message = current} AS MessageMethod;
		SET deinit = { name = "deinit", params = "", message = current} AS MessageMethod;
	]
	
	
	//El define, cual será su futuro? hace poco tuve problemas con el tipo STRUCT
	//hasta ahora la jerarquia de clases es así.
	//   IDEFINE
	//   /     \ 
	// Define Lib
	//    /
	//todos los defiens.	
	//
	//
	// E idealmente?
	// STRUCT 
	//	 -> Define -> otros defines
	//   -> Lib
	//   -> Method
	//   -> Otros tipos
	// en este caso seria algo así la estructura general
	// {estructura} más cosas  [ bloque ]
	// el problema del sin cosas se ve sin definir, como que no quedará claro.
	// a menos que podamos llamar una regla de antlr dinamicamente.
	DEFINE MESSAGE Spawn
	[
		//Podemos decir que el ADD es para agregar, pero que tipo de agregue?
		//Definido por el tipo el cual puede ser un tipo de define, u otra cosa.
		//Ya ahora el tipo define la estructura a usar o añadir. Pero... COMO diferencio la estructura a usar y además que metodo debo usar para almacenar los datos.
		//hay que revisar la estructura define.
		//ADD definetype definename(arguments)[more arguments?]		
		//ADD type   method(params) [arguments]
		//ADD METHOD added(Entity entity)
		//[
		//    valueReplace = "entity instanceof"
		//]
		//ADD METHOD added(Entitity entity)
		//{
		//   valueReplace = "entity instanceof %s"
		//}
		//un add por cada estructura tipo define? o un ADD dependiendo de tipo
		//Creo que es más conveniente un ADD dependiendo del tipo y que la verificacion se haga cuadno se intenta añadir el ADD
		//ya pero, el ADD tipo METHOD... no es un define en comparación a los otros ADDs si quiero mantener la misma estructura
		//debe tener algo de equivalencia, talvez añada un tipo struct...
		//el varname debe ser eliminado
		SET added    = { name = "added",  valueReplace="entity instanceof %s", params = "Entity entity", message = current} AS MessageMethod;
		SET removed  = { name = "removed",valueReplace="entity instanceof %s", params = "Entity entity", message = current} AS MessageMethod;
	]	
	
	DEFINE MESSAGE Timer
	[
		SET active  = { name = "active",  valueReplace="index == %s", params = "int index", message = current} AS MessageMethod;
		SET setTime = { name = "setTime", params = "int index, int time", message = current} AS MessageMethod;
		SET cancel  = { name = "cancel",  params = "int index", message = current} AS MessageMethod;
	]
	DEFINE MESSAGE Level
	[
		SET change = { name = "change",  params = "String state", message = current} AS MessageMethod;
		SET reload = { name = "reload", params = "", message = current} AS MessageMethod;
	]
	
	
	SET methods  = {		
		translate = Move.translate, rotate = Move.rotate, angularSpeed = Move.angularSpeed, speed = Move.speed, forward = Move.forward,
		begin = Contact.begin,end = Contact.end,
		shot = Gun.shot, reload = Gun.reload, changeBullet = Gun.changeBullet,
		setDelayShot = AutoGun.SetDelayShot, setShot = AutoGun.SetShot,		
		active = MESSAGE.Timer.active, setTime=MESSAGE.Timer.setTime, cancel = MESSAGE.Timer.cancel,
		change = MESSAGE.Level.change, reload = MESSAGE.Level.reload,
		follow = MESSAGE.Camera.follow, unfollow = MESSAGE.Camera.unfollow,
	} AS MessageMethods;
	
	SET resolvers = 
	{ 		
		State = 
		{
			General =
			{
				"com.apollo.WorldContainer",					
				"com.apollo.GameManager",
				"com.apollo.GameState",
				"com.badlogic.gdx.Gdx",
				"com.badlogic.gdx.graphics.GL10",
				"com.badlogic.gdx.graphics.Camera",
				"com.badlogic.gdx.graphics.OrthographicCamera"				
			}
		} AS DependResolver,
		Manager = 
		{
			RenderManager = 
			{
				"com.apollo.managers.StageRenderManager",
				"com.badlogic.gdx.graphics.g2d.SpriteBatch",				
			},
			PhysicsManager = 
			{
				"com.apollo.managers.PhysicsManager"				
			},
			EntityManager = 
			{
				"com.apollo.managers.EntityManager",				
			} 
		} AS DependResolver,
		Entity =
		{ 
			Builder = 
			{
				"com.apollo.Message",
				"com.apollo.MessageHandler",
				"com.apollo.EntityBuilder",
				"com.apollo.Entity",
				"com.apollo.WorldContainer",				
			},
			Entity = 
			{
				"com.apollo.Entity",			
				"com.apollo.WorldContainer",				
				"com.apollo.Behavior",		
				"com.apollo.messages.EntityMessage",				
				"com.apollo.utils.Bag",
				"java.util.HashMap",
				"java.util.Map",
			},
			Behaviors = 
			{
				"com.apollo.components.%sBehavior"
			},
			Message = 
			{
				"com.apollo.Message",
				"com.apollo.utils.Bag",
				"com.apollo.MessageHandler",
				"com.apollo.utils.ImmutableBag"
			}
		} AS EntityDependResolver,
		Message = 
		{
			Level   = 
			{				
				"com.apollo.messages.CameraMessage",
				"com.apollo.messages.CameraMessageHandler"		
			},
			Level   = 
			{				
				"com.apollo.messages.LevelMessage",
				"com.apollo.messages.LevelMessageHandler"		
			},
			Key     = 
			{
				"com.badlogic.gdx.Input",
				"com.apollo.messages.KeyMessage",
				"com.apollo.messages.KeyMessageHandler"		
			},
			Mouse =
			{
				"com.badlogic.gdx.Input",
				"com.apollo.messages.MouseMessage",
				"com.apollo.messages.MouseMessageHandler"		
			},
			Move    = 
			{
				"com.apollo.messages.MoveMessage",
				"com.apollo.messages.MoveMessageHandler"
			},
			Contact =
			{
				"com.badlogic.gdx.physics.box2d.Fixture",
				"com.badlogic.gdx.physics.box2d.Contact",
				"com.apollo.messages.ContactMessage",
				"com.apollo.messages.ContactMessageHandler"	
			},
			Gun = 
			{
				"com.apollo.messages.GunMessage",
				"com.apollo.messages.GunMessageHandler"
			},
			AutoGun = 
			{
				"com.apollo.messages.AutoGunMessage",
				"com.apollo.messages.AutoGunMessageHandler"
			},
			Entity =
			{
				"com.apollo.messages.EntityMessage",
				"com.apollo.messages.EntityMessageHandler"
			},
			Spawn =
			{
				"com.apollo.messages.SpawnMessage",
				"com.apollo.messages.SpawnMessageHandler"
			},
			Camera =
			{
				"com.apollo.messages.CameraMessage",
				"com.apollo.messages.CameraMessageHandler"
			},
			Timer =
			{
				"com.apollo.messages.TimerMessage",
				"com.apollo.messages.TimerMessageHandler"
			}
		} AS DependResolver,
		Asset =
		{
			Texture =
			{
				"com.badlogic.gdx.graphics.Texture",
				"com.badlogic.gdx.assets.loaders.TextureLoader.TextureParameter"
			},
			Atlas =
			{
				"com.badlogic.gdx.graphics.g2d.TextureAtlas"
			},
			Sprite = 
			{
				"com.apollo.managers.graphics.Sprite",
				"com.apollo.managers.graphics.SpriteLoader.AnimationParameter",
			},
			TileMap = 
			{
				"com.badlogic.gdx.maps.tiled.TiledMap"
			},
			Terrain2D =
			{
				"com.apollo.managers.physics.Terrain2D"
			},
			EntitySpawn =
			{
				"com.apollo.managers.entity.EntitySpawn",
				"com.apollo.managers.entity.EntitySpawnLoader.EntitySpawnParameter",
			}
		} AS DependResolver,
		STRUCT =
		{
			Rectangle = 
			{
				"com.badlogic.gdx.math.Rectangle",
			},
			MapProperties = 
			{
				"com.badlogic.gdx.maps.MapProperties",
			}			
		} AS DependResolver,
	} AS DependResolvers;
	
	DEFINE STRUCT Rectangle 
	[		
	]
	
	DEFINE STRUCT MapProperties
	[		
	]	
]