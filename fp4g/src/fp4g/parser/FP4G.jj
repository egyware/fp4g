/**
 * JavaCC template file created by SF JavaCC plugin 1.5.17+ wizard for JavaCC 1.5.0+
 */options{  JDK_VERSION = "1.5";
  IGNORE_CASE = true;    static = false;
 }PARSER_BEGIN(FastPrototyping4Game)package fp4g.parser;
import java.util.LinkedList;
import fp4g.data.*;
import static fp4g.Log.ErrType;
import static fp4g.Log.WarnType;
import static fp4g.Log.InfoType;
import static fp4g.Log.Show;

public class FastPrototyping4Game{   
 
}PARSER_END(FastPrototyping4Game)SKIP :{  " "| "\r"| "\t"
| "\n"
}

SPECIAL_TOKEN : /* comentarios */
{
	<SINGLE_LINE_COMMENT: "//" ( ~["\n","\r"] )* ("\n" | "\r" | "\r\n") >
|	<MULTI_LINE_COMMENT: "/*" ( ~["*"] | ("*")+ ~["*","/"] )* ("*")+ "/" >
}

  

TOKEN: /* keywords */
{      
    < DEFINE     : "DEFINE" >
|	< ADD        : "ADD" >
|   < ON         : "ON" >
|   < SEND       : "SEND" >
|   < GROUP      : "GROUP" >
| 	< SUBSCRIBE  : "SUBSCRIBE" >
|   < UNSUBSCRIBE: "UNSUBSCRIBE" >
|	< START      : "START" >
|   < RESUME     : "RESUME" >
|   < PAUSE      : "PAUSE" >
|   < EXIT       : "EXIT" >

}

TOKEN: /* auxiliars keywords */
{    < SYSTEM  : "SYSTEM" >
|   < GAME    : "GAME" >  
|   < STATE   : "STATE" >
|   < BEHAVIOR: "BEHAVIOR" >
|   < ENTITY  : "ENTITY" >
|   < GOAL    : "GOAL" >
|   < MESSAGE : "MESSAGE" >
|   < BASE    : "BASE" >
|   < TO      : "TO" >
|   < SOURCE  : "SOURCE" >	
}

TOKEN: /* Separadores */
{
  < ABRE_COR  : "[" >
| < ABRE_PAR  : "(" >
| < CIERRA_COR: "]" >
| < CIERRA_PAR: ")" >
| < COMA      : "," >
| < EQUAL     : "=" >
| < DOT       : "." >
}TOKEN : /* Literales */{  < INT_LITERAL 	: (< DIGIT >)+ >
| < DECIMAL_LITERAL : (< DIGIT >)*"."(< DIGIT >)+ >
| < STRING_LITERAL  : "\""(~["\""])*"\""  > {  matchedToken.image = image.substring(1,lengthOfMatch-1);}
| < BOOL_LITERAL 	: "true"|"false" > | < #DIGIT 			: [ "0"-"9" ] >}

TOKEN : /* OPERATORS */
{
  < PLUS : "+" >
| < MINUS : "-" >
| < MULTIPLY : "*" >
| < DIVIDE : "/" >
| < AND : "AND" >
| < OR : "OR" >
| < XOR : "XOR" >
| < NOT : "NOT" >
}

TOKEN: /* Identificador */
{
  	< IDENTIFIER : [ "a"-"z","A"-"Z","_" ]([ "a"-"b","A"-"Z","_","0"-"9" ])* >
}


IScope game(IScope init_value) :
{
  IScope object;}
{
  < DEFINE > < GAME > object = prototype_object_set(init_value) < EOF >
  { return object;}}

IScope prototype_object_set(IScope init_value) :
{
  	int line = 0; 	
}
{
  < ABRE_COR > values(init_value) <CIERRA_COR >
  {    
    return init_value;
  } 
}

IScope prototype_object(IScope parent) :
{  	
  	IScope scope = new MapScope(parent);
  	int line = 0;}
{
  line = < ABRE_COR >.beginLine values(scope) <CIERRA_COR >
  {
     //scope.setLine(line);
     return scope;
  } 
}

void value(IScope local):
{
   String key;
   Object value;  
}
{ 	
	value = add(local) { local.add(value); }	
	| define(local)
	| start(local)
	| LOOKAHEAD(2) key = < IDENTIFIER >.image < EQUAL > value = expresion(local) { local.set(key,value); }
	| LOOKAHEAD(2) inline_prototype_object(local) 	 
	| value = function(local) { local.add(value);	}
		
}



void  inline_prototype_object(IScope local):
{
    String key;  
    IScope inline;
    IScope last;
}
{
  	key = < IDENTIFIER >.image  	{
  	  //trata de acceder a una instancia local, y si no existe la crea. La idea es crear un objeto rapidamente
  	  inline = (IScope)local.localGet(key);
  	  if(inline == null) //si no existe, lo creo de inmediato
  	  {		inline = new MapScope(local);
		local.set(key,inline);
		key = null;		
  	  }
  	  last = inline;  	}
  	(  	  <DOT>	key = <IDENTIFIER >.image
  	  {
  	    IScope c = (IScope)local.localGet(key);
  	    if(c == null)
  	    {  	      c = new MapScope(last);		  last.set(key,c);
		  key = null;		  
		}
		last = c;		
  	  }   		  		
  	)*
  	< EQUAL > prototype_object_set(last)   }

void send(IScope local):
{
  String messageType;
  String to;
  IScope contents;
  int line = 0;  
}
{
  	line = < SEND >.beginLine messageType = < IDENTIFIER >.image < TO > to = < IDENTIFIER >.image contents = prototype_object(local) 
  	{
  	  Send send = new Send(messageType,local, to, contents);
  	  send.setLine(line);
  	  local.add(send);
  	} 
}

void on(IScope local):
{
    String messageType;
    IScope code;
    int line = 0;
}
{
  line = < ON >.beginLine messageType = <IDENTIFIER >.image code = prototype_object(local)
  {
    On on = new On(messageType,local,code);
    on.setLine(line);
    local.add(on);
  }
}

void start(IScope local):
{
    String stateGame;
    int line = 0;}
{	line = < START >.beginLine stateGame = <IDENTIFIER >.image
	{
	  Object value = local.get(stateGame);
	  if(value != null)
	  {
	    Start start = null;  	  	if(value instanceof Define)
	  	{	      Define startState = (Define)value; 
		  start = Start.Set(startState);		}
		else if(value instanceof Add)
		{
		  Add startCustomState = (Add)value;
		  start = Start.Set(startCustomState); 		}
		else
	 	{
	 	  	//No se esperaba esto acá			 
			 Show(ErrType.ExpectedAddDefineStart,line);
	 	}
	 	if(start != null)
		{
		   start.setLine(line);
		   local.add(start);			
		}
		else
		{
		  //No se esperaba esto acá
		   Show(ErrType.NotExpectedType,line);
		}
	 }	 
	}
}  

Function function(IScope local):
{
    Object args[] = null;
    String functionName;
    Token functionToken;
    int line = 0;
    
}{  
  functionToken = < IDENTIFIER > < ABRE_PAR > [args = params(local)]< CIERRA_PAR >
  {
    functionName = functionToken.image;
    line = functionToken.beginLine;
 	Function f = Function.buildFunction(functionName,args);
 	if(f == null)
 	{ 	  		Show(ErrType.NotDefineFuction,line);
		return null;
 	}
 	else
 	{		return f;
 	}  }}Object[] params(IScope local):
{
  LinkedList<Object > list = new LinkedList<Object >();
}
{
  param(list,local) ( < COMA > param(list,local) )*
  {	return list.toArray();
  }
}

void param(LinkedList<Object > list, IScope local):
{
  Object value;}
{
  value = expresion(local)
  {	list.add(value);
  }}

void values(IScope local):
{ 
}
{
   value(local) ( LOOKAHEAD(2) < COMA > value(local) )* [< COMA >]       
}

void define(IScope parent):
{ 
  String factoryName;
  String basedName = null;
  FactoryType factoryType;
  IScope local = null;
  int line = 0;  }
{
  line = < DEFINE >.beginLine  (
     < STATE  >  { factoryType   =  FactoryType.STATE;  }      |< SYSTEM >  { factoryType   =  FactoryType.SYSTEM; }
    |< BEHAVIOR >{ factoryType   =  FactoryType.BEHAVIOR; }
    |< ENTITY >  { factoryType   =  FactoryType.ENTITY; }
    |< GOAL >    { factoryType   =  FactoryType.GOAL;  }
  )
  [< BASE > basedName = < IDENTIFIER >.image ]
  factoryName = < IDENTIFIER >.image  local = prototype_object(parent)
  {    	Define.Set(factoryType,factoryName,basedName,parent,local,line); 
  }
}
Add add(IScope parent):
{  
  FactoryType factoryType;
  Token factoryName;
  IScope local = null;
  int line = 0;
}
{
   line = < ADD >.beginLine 
   (       < STATE  > { factoryType   =  FactoryType.STATE;  }  
    |< SYSTEM > { factoryType   =  FactoryType.SYSTEM; }
    |< BEHAVIOR > { factoryType =  FactoryType.BEHAVIOR; }
    |< ENTITY > { factoryType   =  FactoryType.ENTITY; }
    |< GOAL >   { factoryType   =  FactoryType.GOAL;  }
   )
   factoryName = < IDENTIFIER > [ local = prototype_object(parent) ]
   {
     Add add = new Add(factoryName.image, factoryType,local);
     add.setLine(line);
      return add;
   }}

Object expresion(IScope local):
{
  Object value = null;
  Token t;
  int line = 0;
}
{	
	(	    t = < INT_LITERAL > { value = Integer.parseInt(t.image);  }
		| t = < DECIMAL_LITERAL > { value = Double.parseDouble(t.image); }
		| t = < STRING_LITERAL >	 { value = t.image; }			
		| t = < BOOL_LITERAL > { value = Boolean.parseBoolean(t.image); }
		| LOOKAHEAD(2) value = function(local)
		| t = < IDENTIFIER > { value = local.get(t.image); }		   
		| value = prototype_object(local)
		| value = add(local)
			
	)
	{
	  if(value instanceof Value)
	  {	  	((Value)value).setLine(getToken(0).beginLine);
	  }
	  return value;
	}
}