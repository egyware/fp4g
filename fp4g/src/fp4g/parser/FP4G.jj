/**
 * JavaCC template file created by SF JavaCC plugin 1.5.17+ wizard for JavaCC 1.5.0+
 */options{  JDK_VERSION = "1.5";
  IGNORE_CASE = true;    static = false;
 }PARSER_BEGIN(FastPrototyping4Game)package fp4g.parser;
import java.util.LinkedList;
import fp4g.data.*;
import fp4g.data.define.*;import static fp4g.Log.ErrType;
import static fp4g.Log.WarnType;
import static fp4g.Log.InfoType;
import static fp4g.Log.Show;

public class FastPrototyping4Game{   
 
}PARSER_END(FastPrototyping4Game)SKIP :{  " "| "\r"| "\t"
| "\n"
}

SPECIAL_TOKEN : /* comentarios */
{
	< SINGLE_LINE_COMMENT: "//" ( ~["\n","\r"] )* ("\n" | "\r" | "\r\n") >
|	< MULTI_LINE_COMMENT: "/*" ( ~["*"] | ("*")+ ~["*","/"] )* ("*")+ "/" >
}

  

TOKEN: /* keywords */
{      
    < DEFINE     : "DEFINE" >
|	< ADD        : "ADD" >
|   < ON         : "ON" >
|   < SEND       : "SEND" >
|   < GROUP      : "GROUP" >
| 	< SUBSCRIBE  : "SUBSCRIBE" >
|   < UNSUBSCRIBE: "UNSUBSCRIBE" >
|	< START      : "START" >
|   < RESUME     : "RESUME" >
|   < PAUSE      : "PAUSE" >
|   < USING      : "USING" > 
|   < EXIT       : "EXIT" >

}

TOKEN: /* auxiliars keywords */
{    < MANAGER  : "MANAGER" >
|   < GAME    : "GAME" >  
|   < STATE   : "STATE" >
|   < BEHAVIOR: "BEHAVIOR" >
|   < ENTITY  : "ENTITY" >
|   < GOAL    : "GOAL" >
|   < MESSAGE : "MESSAGE" >
|   < BASE    : "BASE" >
|   < TO      : "TO" >
|   < SOURCE  : "SOURCE" >	
}

TOKEN: /* Separadores */
{
  < ABRE_COR  : "[" >
| < ABRE_PAR  : "(" >
| < CIERRA_COR: "]" >
| < CIERRA_PAR: ")" >
| < COMA      : "," >
| < EQUAL     : "=" >
| < DOT       : "." >
| < DOTCOMA   : ";" >
}TOKEN : /* Literales */{  < INT_LITERAL 	: (< DIGIT >)+ >
| < DECIMAL_LITERAL : (< DIGIT >)*"."(< DIGIT >)+ >
| < STRING_LITERAL  : "\""(~["\""])*"\""  > {  matchedToken.image = image.substring(1,lengthOfMatch-1);}
| < BOOL_LITERAL 	: "true"|"false" > | < #DIGIT 			: [ "0"-"9" ] >}

TOKEN : /* OPERATORS */
{
  < PLUS : "+" >
| < MINUS : "-" >
| < MULTIPLY : "*" >
| < DIVIDE : "/" >
| < AND : "AND" >
| < OR : "OR" >
| < XOR : "XOR" >
| < NOT : "NOT" >
}

TOKEN: /* Identificador */
{
  	< IDENTIFIER : [ "a"-"z","A"-"Z","_" ]([ "a"-"b","A"-"Z","_","0"-"9" ])* >
}


void usings(Game game):
{  
}
{	using(game) ( LOOKAHEAD(2) < DOTCOMA > using(game) )* [ < DOTCOMA > ]
}

void using(Game game):
{
   //TODO: Por hacer los usings...
}
{
  	< USING > (<MANAGER >|< STATE >|< BEHAVIOR >|< ENTITY >| < GOAL >|< MESSAGE >) <  IDENTIFIER >
}

void game(Game game):
{}
{
  [	usings(game) ]//using opcional  < DEFINE > <GAME > game.name = < IDENTIFIER >.image <ABRE_COR > [values(game)] <CIERRA_COR > <EOF >  
}



void values(Define define):
{   }
{
   value(define) ( LOOKAHEAD(2) < COMA > value(define) )* [ < COMA > ]       
}


void value(Define define):
{
  String key;
  Object value;
}
{
  	add(define,null)
  | define(define)
  | on(define)
  | key = < IDENTIFIER >.image < EQUAL > add(define,key)
}
 /*	
	| define(local)
	| start(local)
	| LOOKAHEAD(2) key = < IDENTIFIER >.image < EQUAL > value = expresion(local) { local.set(key,value); }
	| LOOKAHEAD(2) inline_prototype_object(local) 	 
	| value = function(local) { local.add(value);	}*/

void add(Define define,String keyName):
{
  int line = 0;
  ObjectType type = null;
  String name;
  Add add;
 // List<?> exprlist;
}
{
   line = < ADD >.beginLine 
   (
     < STATE  >   { type  =  ObjectType.STATE;  }  
    |< MANAGER >  { type  =  ObjectType.MANAGER; }
    |< BEHAVIOR > { type  =  ObjectType.BEHAVIOR; }
    |< ENTITY >   { type  =  ObjectType.ENTITY; }
    |< GOAL >     { type  =  ObjectType.GOAL;  }
   )
   name = < IDENTIFIER >.image
   {
     add = new Add(type,name,keyName);     
     add.setLine(line);
     define.addADD(add);     
   }
   [ exprlist() ]
}
void define(Define parent):
{ 
  String name;
  String basedName = null;
  ObjectType factoryType;
  int line = 0;
  Define define = null;
}
{
  	line = < DEFINE >.beginLine
  (
     < STATE  >  { factoryType   =  ObjectType.STATE;  }  
    |< MANAGER > { factoryType   =  ObjectType.MANAGER; }
    |< BEHAVIOR >{ factoryType   =  ObjectType.BEHAVIOR; }
    |< ENTITY >  { factoryType   =  ObjectType.ENTITY; }
    |< GOAL >    { factoryType   =  ObjectType.GOAL;  }
  )
  [< BASE > basedName = < IDENTIFIER >.image ]
  name = < IDENTIFIER >.image 
  {
    switch(factoryType)
    {		case STATE:
			define = new GameState(name);
		break;
		case MANAGER:
			///TODO: define = new Manager(name);
		break;
		case BEHAVIOR:
			///TODO: define = new Behavior();
			
		break;
		case ENTITY:
			define = new Entity(name,parent);
		break;
		case GOAL:
			define = new Goal(name);
		break;
    }
    define.setLine(line);
  }
  <  ABRE_COR > values(define) < CIERRA_COR >
  {
    parent.addDefine(define);  }
  
}

void on(Define define):
{}
{
  	< ON > <IDENTIFIER > }

void exprlist():
{
  ExprList exprList = new ExprList();
  Expresion expr;}
{	< ABRE_PAR > expr = expresion() { exprList.add(expr);} ( < COMA > expr = expresion() { exprList.add(expr);} )* <CIERRA_PAR >
}
Expresion expresion():
{
}
{	< INT_LITERAL >
	{
	  	return null;	}
}
/*Function function(IScope local):
{
    Object args[] = null;
    String functionName;
    Token functionToken;
    int line = 0;
    
}{  
  functionToken = < IDENTIFIER > < ABRE_PAR > [args = params(local)]< CIERRA_PAR >
  {
    functionName = functionToken.image;
    line = functionToken.beginLine;
 	Function f = Function.buildFunction(functionName,args);
 	if(f == null)
 	{ 	  		Show(ErrType.NotDefineFuction,line);
		return null;
 	}
 	else
 	{		return f;
 	}  }}*//*Object[] params(IScope local):
{
  LinkedList<Object > list = new LinkedList<Object >();
}
{
  param(list,local) ( < COMA > param(list,local) )*
  {	return list.toArray();
  }
}*/

/*void param(LinkedList<Object > list, IScope local):
{
  Object value;}
{
  value = expresion(local)
  {	list.add(value);
  }}*/
/*
Object expresion(String keyName):
{
  Object value = null;
  Token t;
  int line = 0;
}
{	
	(	      t = < INT_LITERAL > { value = Integer.parseInt(t.image);  }
		| t = < DECIMAL_LITERAL > { value = Double.parseDouble(t.image); }
		| t = < STRING_LITERAL >	 { value = t.image; }			
		| t = < BOOL_LITERAL > { value = Boolean.parseBoolean(t.image); }
		//| LOOKAHEAD(2) value = function(local)
		| LOOKAHEAD(2) t = < IDENTIFIER > { value = local.get(t.image); }
		//| t = < IDENTIFIER > { value = array(local); }		   
		//| value = prototype_object(local)
		| value = add(keyName)
			
	)
	{
	  if(value instanceof Value)
	  {	  	((Value)value).setLine(getToken(0).beginLine);
	  }
	  return value;
	}
}*/