/* Generated By:JavaCC: Do not edit this line. FastPrototyping4Game.java */
package fp4g.parser;
import java.util.LinkedList;
import fp4g.data.*;

public class FastPrototyping4Game implements FastPrototyping4GameConstants {

  final public Scope game(Scope init_value) throws ParseException {
  Scope object;
    jj_consume_token(DEFINE);
    jj_consume_token(GAME);
    object = prototype_object_set(init_value);
    jj_consume_token(0);
    {if (true) return object;}
    throw new Error("Missing return statement in function");
  }

  final public Scope prototype_object_set(Scope init_value) throws ParseException {
        int line = 0;
    jj_consume_token(ABRE_COR);
    values(init_value);
    jj_consume_token(CIERRA_COR);
    init_value.setLine(line);
    {if (true) return init_value;}
    throw new Error("Missing return statement in function");
  }

  final public Scope prototype_object(Scope parent) throws ParseException {
        Scope scope = new Scope(parent);
        int line = 0;
    line = jj_consume_token(ABRE_COR).beginLine;
    values(scope);
    jj_consume_token(CIERRA_COR);
     scope.setLine(line);
     {if (true) return scope;}
    throw new Error("Missing return statement in function");
  }

  final public void value(Scope local) throws ParseException {
  String key;
  Object value;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ADD:
      value = add(local);
                             local.add(value);
      break;
    case DEFINE:
      define(local);
      break;
    case START:
      start(local);
      break;
    default:
      jj_la1[0] = jj_gen;
      if (jj_2_1(2)) {
        key = jj_consume_token(IDENTIFIER).image;
        jj_consume_token(EQUAL);
        value = expresion(local);
                                                                                       local.set(key,value);
      } else if (jj_2_2(2)) {
        inline_prototype_object(local);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENTIFIER:
          value = function(local);
                                    local.add(value);
          break;
        default:
          jj_la1[1] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
  }

  final public void inline_prototype_object(Scope local) throws ParseException {
  String key;
  Scope inline;
  Scope last;
    key = jj_consume_token(IDENTIFIER).image;
          //trata de acceder a una instancia local, y si no existe la crea. La idea es crear un objeto rapidamente
          inline = (Scope)local.localGet(key);
          if(inline == null) //si no existe, lo creo de inmediato
          {
                inline = new Scope(local);
                local.set(key,inline);
                key = null;
          }
          last = inline;
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOT:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_1;
      }
      jj_consume_token(DOT);
      key = jj_consume_token(IDENTIFIER).image;
            Scope c = (Scope)local.localGet(key);
            if(c == null)
            {
              c = new Scope(last);
                  last.set(key,c);
                  key = null;
                }
                last = c;
    }
    jj_consume_token(EQUAL);
    prototype_object_set(last);
  }

  final public void start(Scope local) throws ParseException {
  String stateGame;
  int line = 0;
    line = jj_consume_token(START).beginLine;
    stateGame = jj_consume_token(IDENTIFIER).image;
          Object value = local.get(stateGame);
          if(value != null && value instanceof Define)
          {
              Define startState = (Define)value;
                  Start start = Start.Set(startState);
                  if(start != null)
                  {
                    start.setLine(line);
                        local.add(start);
                  }
                  else
                  {
                     //TODO lanzar un error acá
                  }
                }
                else
                {
                         //TODO lanzar un error acá
                }
  }

  final public Function function(Scope local) throws ParseException {
  Object args[] = null;
  String functionName;
    functionName = jj_consume_token(IDENTIFIER).image;
    jj_consume_token(ABRE_PAR);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ADD:
    case ABRE_COR:
    case INT_LITERAL:
    case DECIMAL_LITERAL:
    case STRING_LITERAL:
    case BOOL_LITERAL:
    case IDENTIFIER:
      args = params(local);
      break;
    default:
      jj_la1[3] = jj_gen;
      ;
    }
    jj_consume_token(CIERRA_PAR);
        Function f = Function.buildFunction(functionName,args);
        if(f == null)
        {
                //TODO lanzar un error acá indicando que la funcion descrita no se encontró
                {if (true) return null;}
        }
        else
        {
                {if (true) return f;}
        }
    throw new Error("Missing return statement in function");
  }

  final public Object[] params(Scope local) throws ParseException {
  LinkedList<Object > list = new LinkedList<Object >();
    param(list,local);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMA:
      jj_consume_token(COMA);
      params(local);
      break;
    default:
      jj_la1[4] = jj_gen;
      ;
    }
        {if (true) return list.toArray();}
    throw new Error("Missing return statement in function");
  }

  final public void param(LinkedList<Object > list, Scope local) throws ParseException {
  Object value;
    value = expresion(local);
        list.add(value);
  }

  final public void values(Scope local) throws ParseException {
    value(local);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMA:
      jj_consume_token(COMA);
      values(local);
      break;
    default:
      jj_la1[5] = jj_gen;
      ;
    }
  }

  final public void define(Scope parent) throws ParseException {
  String factoryName;
  String basedName = null;
  Type factoryType;
  Scope local = null;
  int line = 0;
    line = jj_consume_token(DEFINE).beginLine;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STATE:
      jj_consume_token(STATE);
                  factoryType =  Type.STATE;
      break;
    case SYSTEM:
      jj_consume_token(SYSTEM);
                  factoryType =  Type.SYSTEM;
      break;
    case BEHAVIOR:
      jj_consume_token(BEHAVIOR);
                    factoryType =  Type.BEHAVIOR;
      break;
    case ENTITY:
      jj_consume_token(ENTITY);
                  factoryType =  Type.ENTITY;
      break;
    case GOAL:
      jj_consume_token(GOAL);
                factoryType =  Type.GOAL;
      break;
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BASE:
      jj_consume_token(BASE);
      basedName = jj_consume_token(IDENTIFIER).image;
      break;
    default:
      jj_la1[7] = jj_gen;
      ;
    }
    factoryName = jj_consume_token(IDENTIFIER).image;
    local = prototype_object(parent);
        Define.Set(factoryType,factoryName,basedName,parent,local,line);
  }

  final public Add add(Scope parent) throws ParseException {
  Type factoryType;
  Token factoryName;
  Scope local = null;
  int line = 0;
    line = jj_consume_token(ADD).beginLine;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SYSTEM:
      jj_consume_token(SYSTEM);
                   factoryType =  Type.SYSTEM;
      break;
    case BEHAVIOR:
      jj_consume_token(BEHAVIOR);
                     factoryType =  Type.BEHAVIOR;
      break;
    case ENTITY:
      jj_consume_token(ENTITY);
                   factoryType =  Type.ENTITY;
      break;
    case GOAL:
      jj_consume_token(GOAL);
                 factoryType =  Type.GOAL;
      break;
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    factoryName = jj_consume_token(IDENTIFIER);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ABRE_COR:
      local = prototype_object(parent);
      break;
    default:
      jj_la1[9] = jj_gen;
      ;
    }
     Add add = new Add(factoryName.image, factoryType,local);
     add.setLine(line);
      {if (true) return add;}
    throw new Error("Missing return statement in function");
  }

  final public Object expresion(Scope local) throws ParseException {
  Object value = null;
  Token t;
  int line = 0;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INT_LITERAL:
      t = jj_consume_token(INT_LITERAL);
                                  value = Integer.parseInt(t.image);
      break;
    case DECIMAL_LITERAL:
      t = jj_consume_token(DECIMAL_LITERAL);
                                            value = Double.parseDouble(t.image);
      break;
    case STRING_LITERAL:
      t = jj_consume_token(STRING_LITERAL);
                                                   value = t.image.substring(1,t.image.length()-1);
      break;
    case BOOL_LITERAL:
      t = jj_consume_token(BOOL_LITERAL);
                                         value = Boolean.parseBoolean(t.image);
      break;
    default:
      jj_la1[10] = jj_gen;
      if (jj_2_3(2)) {
        value = function(local);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENTIFIER:
          t = jj_consume_token(IDENTIFIER);
                                       value = local.get(t.image);
          break;
        case ABRE_COR:
          value = prototype_object(local);
          break;
        case ADD:
          value = add(local);
          break;
        default:
          jj_la1[11] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
          if(value instanceof Value)
          {
                ((Value)value).setLine(getToken(0).beginLine);
          }
          {if (true) return value;}
    throw new Error("Missing return statement in function");
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_3R_4() {
    if (jj_scan_token(DOT)) return true;
    return false;
  }

  private boolean jj_3R_3() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(ABRE_PAR)) return true;
    return false;
  }

  private boolean jj_3_2() {
    if (jj_3R_2()) return true;
    return false;
  }

  private boolean jj_3R_2() {
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_4()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(EQUAL)) return true;
    return false;
  }

  private boolean jj_3_3() {
    if (jj_3R_3()) return true;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(EQUAL)) return true;
    return false;
  }

  /** Generated Token Manager. */
  public FastPrototyping4GameTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[12];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x2008400,0x0,0x0,0x4008000,0x40000000,0x40000000,0x43300,0x10000,0x43200,0x4000000,0x0,0x4008000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x4000,0x1,0x401e,0x0,0x0,0x0,0x0,0x0,0x0,0x1e,0x4000,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[3];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public FastPrototyping4Game(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public FastPrototyping4Game(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new FastPrototyping4GameTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 12; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 12; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public FastPrototyping4Game(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new FastPrototyping4GameTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 12; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 12; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public FastPrototyping4Game(FastPrototyping4GameTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 12; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(FastPrototyping4GameTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 12; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[47];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 12; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 47; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 3; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
