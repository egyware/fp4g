/* Generated By:JavaCC: Do not edit this line. FastPrototyping4Game.java */
package fp4g.parser;
import java.util.LinkedList;
import fp4g.data.*;
import fp4g.data.define.*;
import fp4g.data.expresion.*;
import static fp4g.Log.ErrType;
import static fp4g.Log.WarnType;
import static fp4g.Log.InfoType;
import static fp4g.Log.Show;

public class FastPrototyping4Game implements FastPrototyping4GameConstants {

  final public void usings(Game game) throws ParseException {
    using(game);
    label_1:
    while (true) {
      if (jj_2_1(2)) {
        ;
      } else {
        break label_1;
      }
      jj_consume_token(DOTCOMA);
      using(game);
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DOTCOMA:
      jj_consume_token(DOTCOMA);
      break;
    default:
      jj_la1[0] = jj_gen;
      ;
    }
  }

  final public void using(Game game) throws ParseException {
    jj_consume_token(USING);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MANAGER:
      jj_consume_token(MANAGER);
      break;
    case STATE:
      jj_consume_token(STATE);
      break;
    case BEHAVIOR:
      jj_consume_token(BEHAVIOR);
      break;
    case ENTITY:
      jj_consume_token(ENTITY);
      break;
    case GOAL:
      jj_consume_token(GOAL);
      break;
    case MESSAGE:
      jj_consume_token(MESSAGE);
      break;
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(IDENTIFIER);
  }

  final public void game(Game game) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case USING:
      usings(game);
      break;
    default:
      jj_la1[2] = jj_gen;
      ;
    }
    jj_consume_token(DEFINE);
    jj_consume_token(GAME);
    game.name = jj_consume_token(IDENTIFIER).image;
    jj_consume_token(ABRE_COR);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DEFINE:
    case ADD:
    case ON:
    case IDENTIFIER:
      values(game);
      break;
    default:
      jj_la1[3] = jj_gen;
      ;
    }
    jj_consume_token(CIERRA_COR);
    jj_consume_token(0);
  }

  final public void values(Define define) throws ParseException {
    value(define);
    label_2:
    while (true) {
      if (jj_2_2(2)) {
        ;
      } else {
        break label_2;
      }
      jj_consume_token(COMA);
      value(define);
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMA:
      jj_consume_token(COMA);
      break;
    default:
      jj_la1[4] = jj_gen;
      ;
    }
  }

  final public void value(Define define) throws ParseException {
  String key;
  Object value;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ADD:
      add(define,null);
      break;
    case DEFINE:
      define(define);
      break;
    case ON:
      on(define);
      break;
    case IDENTIFIER:
      key = jj_consume_token(IDENTIFIER).image;
      jj_consume_token(EQUAL);
      add(define,key);
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

 /*	
	| define(local)
	| start(local)
	| LOOKAHEAD(2) key = < IDENTIFIER >.image < EQUAL > value = expresion(local) { local.set(key,value); }
	| LOOKAHEAD(2) inline_prototype_object(local) 	 
	| value = function(local) { local.add(value);	}*/
  final public void add(Define define,String keyName) throws ParseException {
  int line = 0;
  ObjectType type = null;
  String name;
  Add add;
  ExprList exprList;
    line = jj_consume_token(ADD).beginLine;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STATE:
      jj_consume_token(STATE);
                    type  =  ObjectType.STATE;
      break;
    case MANAGER:
      jj_consume_token(MANAGER);
                    type  =  ObjectType.MANAGER;
      break;
    case BEHAVIOR:
      jj_consume_token(BEHAVIOR);
                    type  =  ObjectType.BEHAVIOR;
      break;
    case ENTITY:
      jj_consume_token(ENTITY);
                    type  =  ObjectType.ENTITY;
      break;
    case GOAL:
      jj_consume_token(GOAL);
                    type  =  ObjectType.GOAL;
      break;
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    name = jj_consume_token(IDENTIFIER).image;
     add = new Add(type,name,keyName);
     add.setLine(line);
     define.addADD(add);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ABRE_PAR:
      jj_consume_token(ABRE_PAR);
      exprList = exprlist();
                                          add.addParams(exprList);
      jj_consume_token(CIERRA_PAR);
      break;
    default:
      jj_la1[7] = jj_gen;
      ;
    }
  }

  final public void define(Define parent) throws ParseException {
  String name;
  String basedName = null;
  ObjectType factoryType;
  int line = 0;
  Define define = null;
  NameList list = null;
    line = jj_consume_token(DEFINE).beginLine;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STATE:
      jj_consume_token(STATE);
                   factoryType   =  ObjectType.STATE;
      break;
    case MANAGER:
      jj_consume_token(MANAGER);
                   factoryType   =  ObjectType.MANAGER;
      break;
    case BEHAVIOR:
      jj_consume_token(BEHAVIOR);
                   factoryType   =  ObjectType.BEHAVIOR;
      break;
    case ENTITY:
      jj_consume_token(ENTITY);
                   factoryType   =  ObjectType.ENTITY;
      break;
    case GOAL:
      jj_consume_token(GOAL);
                   factoryType   =  ObjectType.GOAL;
      break;
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BASE:
      jj_consume_token(BASE);
      basedName = jj_consume_token(IDENTIFIER).image;
      break;
    default:
      jj_la1[9] = jj_gen;
      ;
    }
    name = jj_consume_token(IDENTIFIER).image;
    switch(factoryType)
    {
                case STATE:
                        define = new GameState(name,parent);
                break;
                case MANAGER:
                        ///TODO: define = new Manager(name);
                break;
                case BEHAVIOR:
                        ///TODO: define = new Behavior();

                break;
                case ENTITY:
                        define = new Entity(name,parent);
                break;
                case GOAL:
                        define = new Goal(name);
                break;
    }
    define.setLine(line);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ABRE_PAR:
      jj_consume_token(ABRE_PAR);
      list = nameList();
      jj_consume_token(CIERRA_PAR);
                define.setNameList(list);
      break;
    default:
      jj_la1[10] = jj_gen;
      ;
    }
    jj_consume_token(ABRE_COR);
    values(define);
    jj_consume_token(CIERRA_COR);
    parent.addDefine(define);
  }

  final public void on(Define define) throws ParseException {
    jj_consume_token(ON);
    jj_consume_token(IDENTIFIER);
  }

  final public NameList nameList() throws ParseException {
        NameList list = new NameList();
    declareVar(list);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMA:
        ;
        break;
      default:
        jj_la1[11] = jj_gen;
        break label_3;
      }
      jj_consume_token(COMA);
      declareVar(list);
    }
        {if (true) return list;}
    throw new Error("Missing return statement in function");
  }

  final public void declareVar(NameList list) throws ParseException {
        String varName;
        String declType;
    varName = jj_consume_token(IDENTIFIER).image;
    jj_consume_token(DOBLEDOT);
    declType = jj_consume_token(IDENTIFIER).image;
                list.add(varName,declType);
  }

  final public ExprList exprlist() throws ParseException {
  ExprList exprList = new ExprList();
  Expresion expr;
    expr = expresion();
                             exprList.add(expr);
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMA:
        ;
        break;
      default:
        jj_la1[12] = jj_gen;
        break label_4;
      }
      jj_consume_token(COMA);
      expr = expresion();
                                                                                  exprList.add(expr);
    }
                {if (true) return exprList;}
    throw new Error("Missing return statement in function");
  }

/* expresiones de lua
exp ::= prefixexp
exp ::= nil | false | true (Literales)
exp ::= Number             (Numero)
exp ::= String             (String)
exp ::= functiondef        (funcion, nop, esto no lo tiene Fp4g)
exp ::= tableconstructor   (constructor, nop, esto tampoco)
exp ::= ‘...’              (...)
exp ::= exp binop exp      (expresion operador binario, claro que si :C)
exp ::= unop exp           (operador unario, expresion)
prefixexp ::= var | functioncall | ‘(’ exp ‘)’ (variable o llamada a funcion, vaya que hay tipos de expresiones)
*/
  final public Expresion expresion() throws ParseException {
        String image;
        //aux var
        FunctionCall call = null;
        ExprList exprList = null;
        Expresion expr = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MINUS:
    case NOT:
      expr = unaryOp();
                           {if (true) return expr;}
      break;
    case INT_LITERAL:
      //expr = binaryOp() { return expr; } |
              image = jj_consume_token(INT_LITERAL).image;
                                        {if (true) return new Literal<Integer>(Integer.parseInt(image));}
      break;
    case DECIMAL_LITERAL:
      image = jj_consume_token(DECIMAL_LITERAL).image;
                                            {if (true) return new Literal<Float>(Float.parseFloat(image));}
      break;
    case BOOL_LITERAL:
      image = jj_consume_token(BOOL_LITERAL).image;
                                          {if (true) return new Literal<Boolean>(Boolean.parseBoolean(image));}
      break;
    case STRING_LITERAL:
      image = jj_consume_token(STRING_LITERAL).image;
                                           {if (true) return new Literal<String>(image);}
      break;
    default:
      jj_la1[14] = jj_gen;
      if (jj_2_3(2)) {
        image = jj_consume_token(IDENTIFIER).image;
                                       call = new FunctionCall(image);
        jj_consume_token(ABRE_PAR);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INT_LITERAL:
        case DECIMAL_LITERAL:
        case STRING_LITERAL:
        case BOOL_LITERAL:
        case MINUS:
        case NOT:
        case IDENTIFIER:
          exprList = exprlist();
                                                                                                               call.addParams(exprList);
          break;
        default:
          jj_la1[13] = jj_gen;
          ;
        }
        jj_consume_token(CIERRA_PAR);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENTIFIER:
          image = jj_consume_token(IDENTIFIER).image;
                                       {if (true) return new VarExpr(image);}
          break;
        default:
          jj_la1[15] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public Expresion unaryOp() throws ParseException {
  UnaryOp.Type type;
   Expresion expr;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NOT:
      jj_consume_token(NOT);
                          type = UnaryOp.Type.Not;
      break;
    case MINUS:
      jj_consume_token(MINUS);
                            type = UnaryOp.Type.Minus;
      break;
    default:
      jj_la1[16] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    expr = expresion();
                 {if (true) return new UnaryOp(type,expr);}
    throw new Error("Missing return statement in function");
  }

//TODO PROBLEMAS CON RECURSIVIDAD
  final public Expresion binaryOp() throws ParseException {
        BinaryOp.Type type;
        Expresion left;
        Expresion right;
    left = expresion();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
      jj_consume_token(PLUS);
                           type = BinaryOp.Type.Plus;
      break;
    case MINUS:
      jj_consume_token(MINUS);
                            type = BinaryOp.Type.Minus;
      break;
    default:
      jj_la1[17] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    right = expresion();
                {if (true) return new BinaryOp(type,left,right);}
    throw new Error("Missing return statement in function");
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_3R_5() {
    if (jj_scan_token(USING)) return true;
    return false;
  }

  private boolean jj_3R_11() {
    if (jj_scan_token(ADD)) return true;
    return false;
  }

  private boolean jj_3R_13() {
    if (jj_scan_token(ON)) return true;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_scan_token(DOTCOMA)) return true;
    if (jj_3R_5()) return true;
    return false;
  }

  private boolean jj_3R_12() {
    if (jj_scan_token(DEFINE)) return true;
    return false;
  }

  private boolean jj_3_2() {
    if (jj_scan_token(COMA)) return true;
    if (jj_3R_6()) return true;
    return false;
  }

  private boolean jj_3R_6() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_7()) {
    jj_scanpos = xsp;
    if (jj_3R_8()) {
    jj_scanpos = xsp;
    if (jj_3R_9()) {
    jj_scanpos = xsp;
    if (jj_3R_10()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_7() {
    if (jj_3R_11()) return true;
    return false;
  }

  private boolean jj_3R_10() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3_3() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(ABRE_PAR)) return true;
    return false;
  }

  private boolean jj_3R_9() {
    if (jj_3R_13()) return true;
    return false;
  }

  private boolean jj_3R_8() {
    if (jj_3R_12()) return true;
    return false;
  }

  /** Generated Token Manager. */
  public FastPrototyping4GameTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[18];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x0,0x3e80000,0x20000,0x380,0x0,0x380,0x1e80000,0x40000000,0x1e80000,0x4000000,0x40000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x10,0x0,0x0,0x80000,0x2,0x80000,0x0,0x0,0x0,0x0,0x0,0x2,0x2,0xc13c0,0x413c0,0x80000,0x41000,0x1800,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[3];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public FastPrototyping4Game(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public FastPrototyping4Game(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new FastPrototyping4GameTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 18; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 18; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public FastPrototyping4Game(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new FastPrototyping4GameTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 18; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 18; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public FastPrototyping4Game(FastPrototyping4GameTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 18; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(FastPrototyping4GameTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 18; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[52];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 18; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 52; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 3; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
