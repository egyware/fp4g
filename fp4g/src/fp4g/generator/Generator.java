package fp4g.generator;

import com.apollo.managers.graphics.Sprite;
import com.apollo.managers.graphics.SpriteLoader;
import com.apollo.managers.states.GameManager;
import com.badlogic.gdx.assets.AssetManager;
import com.badlogic.gdx.assets.loaders.resolvers.InternalFileHandleResolver;
import com.sun.codemodel.JBlock;
import com.sun.codemodel.JClass;
import com.sun.codemodel.JClassAlreadyExistsException;
import com.sun.codemodel.JCodeModel;
import com.sun.codemodel.JDefinedClass;
import com.sun.codemodel.JExpr;
import com.sun.codemodel.JExpression;
import com.sun.codemodel.JFieldVar;
import com.sun.codemodel.JInvocation;
import com.sun.codemodel.JMethod;
import com.sun.codemodel.JPackage;
import com.sun.codemodel.JType;
import fp4g.data.Define;
import fp4g.data.Scope;
import fp4g.data.Start;
import fp4g.data.Type;
import java.io.File;
import java.io.IOException;
import java.io.PrintStream;
import java.util.Map.Entry;

public class Generator
{
  private final JCodeModel jcm = Utils.getJCM();
  private Scope game;
  
  public Generator(Scope _game)
  {
    this.game = _game;
  } 
  
  public void generate(String outDirName)
    throws JClassAlreadyExistsException, IOException, ClassNotFoundException
  {
    String name = (String)this.game.get("name");
    int width = ((Integer)this.game.get("width")).intValue();
    int height = ((Integer)this.game.get("height")).intValue();
    
    JPackage gamePack = Utils.getGamePackage();
    JDefinedClass gameClass = gamePack._class(name);
    gameClass._extends(GameManager.class);
    
    Utils.addAutogenerated(gameClass);
    
    gameClass.field(25, this.jcm.INT, "Width", JExpr.lit(width));
    gameClass.field(25, this.jcm.INT, "Height", JExpr.lit(height));
    JFieldVar assetManagerVar = gameClass.field(20, AssetManager.class, "assetManager");
    JFieldVar fileResolverVar = gameClass.field(4, InternalFileHandleResolver.class, "fileResolver");
    
    JMethod createMethod = gameClass.method(1, this.jcm.VOID, "create");
    JBlock createBlock = createMethod.body();
    createMethod.annotate(Override.class);
    
    JMethod disposeMethod = gameClass.method(1, this.jcm.VOID, "dispose");
    JBlock disposeBlock = disposeMethod.body();
    disposeMethod.annotate(Override.class);
    
    disposeBlock.invoke(assetManagerVar, "dispose");
    disposeBlock.add(JExpr._super().invoke("dispose"));
    
    createBlock.assign(fileResolverVar, JExpr._new(this.jcm.ref(InternalFileHandleResolver.class)));
    createBlock.assign(assetManagerVar, JExpr._new(this.jcm.ref(AssetManager.class)));
    createBlock.add(assetManagerVar.invoke("setLoader").arg(this.jcm.ref(Sprite.class).staticRef("class")).arg(JExpr._new(this.jcm.ref(SpriteLoader.class)).arg(fileResolverVar)));
    
    for (Map.Entry entry : this.game.EntrySet())
    {
      String key = String.format("_%s", new Object[] { entry.getKey() });
      Object value = entry.getValue();
      
      if ((!key.equalsIgnoreCase("_name")) && (!key.equalsIgnoreCase("_width")) && (!key.equalsIgnoreCase("_height")))
      {
        JType typeValue = Utils.getType(value);
        JExpression expr = Utils.getExpr(value);
        if (expr != null)
        {
          gameClass.field(4, typeValue, key, expr);
        }
        else if ((value instanceof Define))
        {
          Define define = (Define)value;
          Type stateType = define.getType();
          if (stateType == Type.STATE)
          {
            StateGenerator sg = new StateGenerator(define);
            JDefinedClass state = sg.generate();
            JFieldVar var = gameClass.field(4, state, key, expr);
            
            createBlock.assign(var, JExpr._new(state));
          }
          
        }
        else if ((value instanceof Start))
        {
          Start start = (Start)value;
          createBlock.directStatement(String.format("start(_%s);", new Object[] { start.getStart().getName() }));
        } 
      } 
    } 
    
    gameClass.direct(
      "public static <T> T getAsset(String asset) {return assetManager.get(asset);}\n    public static <T> void loadAsset(String asset, Class<T> _class){assetManager.load(asset, _class);}\n    public static void unloadAsset(String asset){assetManager.unload(asset);}\n    public static void loadAssets() { assetManager.finishLoading();}");
    
    File outDir = new File(outDirName);
    if (!outDir.exists())
    {
      outDir.mkdirs();
    } 
    this.jcm.build(outDir);
    System.out.println("Generados en " + outDir.getAbsolutePath());
  } 
} 