package fp4g.generator;

import java.util.Comparator;
import java.util.HashMap;
import java.util.Map.Entry;

import com.sun.codemodel.JBlock;
import com.sun.codemodel.JClass;
import com.sun.codemodel.JCodeModel;
import com.sun.codemodel.JDefinedClass;
import com.sun.codemodel.JDocComment;
import com.sun.codemodel.JExpr;
import com.sun.codemodel.JExpression;
import com.sun.codemodel.JFieldRef;
import com.sun.codemodel.JInvocation;
import com.sun.codemodel.JPackage;
import com.sun.codemodel.JType;
import com.sun.codemodel.JVar;

import fp4g.data.Add;
import fp4g.data.Define;
import fp4g.data.Function;
import fp4g.data.IScope;
import fp4g.data.MapScope;
import fp4g.data.Start;
import fp4g.data.Type;
import fp4g.data.Value;

//TODO [egyware] cambiar nombres...
public class Utils {
	public static String gamePackageName = "";
	public static String componentsPackageName = "com.apollo.components";
	public static String managersPackageName = "com.apollo.managers";

	public static class Ordenar implements Comparator<Entry<String, Object>> {
		private HashMap<Class<?>, Integer> map = new HashMap<Class<?>, Integer>();

		public Ordenar() {
			map.put(Define.class, 0);
			map.put(Function.class, 1);
			map.put(Add.class, 2);
			map.put(Start.class, 1000);

		}

		@Override
		public int compare(Entry<String, Object> o1, Entry<String, Object> o2) {
			Object a = o1.getValue();
			Object b = o2.getValue();
			Type typeA = null, typeB = null;
			int vA = -1, vB = -1;
			
			int valorA,valorB;
			{
				Integer A = map.get((a instanceof Function) ? Function.class : a
						.getClass());
				Integer B = map.get((b instanceof Function) ? Function.class : b
						.getClass());
				if(A != null)				
					valorA = A;				
				else				
					valorA = 0;
				if(B != null)				
					valorB = B;				
				else				
					valorB = 0;
			}
			
				
			if (a instanceof Define) {
				typeA = ((Define) a).getType();
			} else if (a instanceof Add) {
				typeA = ((Add) a).getType();
			}
			if (b instanceof Define) {
				typeB = ((Define) b).getType();
			} else if (b instanceof Add) {
				typeB = ((Add) b).getType();
			}
			if (a instanceof Value) {
				vA = ((Value)a).getOrdinal();
			} 
			if (b instanceof Value) {
				vB = ((Value)b).getOrdinal();
			} 
			if(vA > -1 && vB >-1 )
			{
				if(vA < vB)
				{
					return -1;
				}else if(vB < vA)
				{
					return 1;
				}else
				{
					return 0;
				}
			}
			else
			{
				if (typeA != null && typeB != null) {
					int result = typeA.compareTo(typeB);
					if (result == 0) {
						if (valorA < valorB) {
							return -1;
						} else if (valorB < valorA) {
							return 1;
						} else {
							return 0;
						}
					}
					return result;
				} else {
					if (valorA < valorB) {
						return -1;
					} else if (valorB < valorA) {
						return 1;
					} else {
						return 0;
					}

				}
			}
		}
	}

	private static Ordenar ordenar = null;
	private static JCodeModel jcm = new JCodeModel();
	private static JPackage gamePackage;
	private static HashMap<String, String> familyByComponent = new HashMap<String, String>();
	private static ScopeVisitor defaultVisitor = new ScopeVisitor() {

		@Override
		public void visitor(JExpression dataVar, JBlock block, IScope scope,
				String key, Object value) {
			JFieldRef field = dataVar.ref(key);

			// JType type = getType(value);
			JExpression expr = getExpr(value);

			if (expr != null) {
				// el objeto field
				block.assign(field, expr);
			} else if (value instanceof IScope) {
				assingScope(field, block, (MapScope) value, this);
			} else if (value instanceof Function) {
				Function f = (Function) value;
				JExpression expr1 = f.call(null, block, scope);
				if (expr1 != null) {
					block.assign(field, expr1);
				}
			}
		}
	};

	public static Comparator<Entry<String, Object>> Sort() {
		if (ordenar == null) {
			ordenar = new Ordenar();
		}
		return ordenar;
	}

	public static void addAutogenerated(JDefinedClass _class) {
		JDocComment jDocComment = _class.javadoc();
		jDocComment.add("AutoGenerated Class by FP4G\n***DO NOT MODIFY***");
	}

	public static JExpression addDefClass(JClass dataClass, String name,
			IScope addScope, JBlock block) {
		return addDefClass(dataClass, name, addScope, block, null);
	}

	public static JExpression addDefClass(JClass dataClass, String name,
			IScope addScope, JBlock block, JExpression expr) {
		JInvocation newInv = JExpr._new(dataClass);
		if (expr != null) {
			newInv.arg(expr);
		}
		JVar dataVar = block.decl(dataClass, String.format("data%s", name),
				newInv);
		assingScope(dataVar, block, addScope);
		return dataVar;
	}

	public static JExpression getExpr(Object value) {
		JExpression expr = null;
		if (value instanceof String) {
			expr = JExpr.lit((String) value);
		} else if (value instanceof Integer) {
			expr = JExpr.lit((Integer) value);
		} else if (value instanceof Long) {
			expr = JExpr.lit((Long) value);
		} else if (value instanceof Float) {
			expr = JExpr.lit((Float) value);
		} else if (value instanceof Double) {
			expr = JExpr.lit((Double) value);
		} else if (value instanceof Boolean) {
			expr = JExpr.lit((Boolean) value);
		} else if (value instanceof Character) {
			expr = JExpr.lit((Character) value);
		}
		return expr;
	}

	public static void assingScope(JExpression dataVar, JBlock block,
			IScope scope) {
		assingScope(dataVar, block, scope, defaultVisitor);
	}

	public static void assingScope(JExpression dataVar, JBlock block,
			IScope scope, ScopeVisitor visitor) {
		for (Entry<String, Object> entry : scope.toArray()) {
			String key = entry.getKey();
			Object value = entry.getValue();
			visitor.visitor(dataVar, block, scope, key, value);
		}
	}

	// public static Class<?> searchInnerClass(String string, Class<?>
	// classSystem) {
	// Class<?> innerClass[] = classSystem.getDeclaredClasses();
	// for(Class<?> _class: innerClass)
	// {
	// if(string.equals(_class.getSimpleName()))
	// {
	// return _class;
	// }
	// }
	// //todo lanzar un error acá....
	// return null;
	// }

	public static JType getType(Object value) {
		JType type = null;
		if (value instanceof Integer) {
			type = jcm.INT;
		} else if (value instanceof Long) {
			type = jcm.LONG;
		} else if (value instanceof Float) {
			type = jcm.FLOAT;
		} else if (value instanceof Double) {
			type = jcm.DOUBLE;
		} else if (value instanceof Boolean) {
			type = jcm.BOOLEAN;
		} else if (value instanceof Character) {
			type = jcm.CHAR;
		} else {
			type = jcm._ref(value.getClass());
		}
		return type;
	}

	public static JCodeModel getJCM() {
		return jcm;
	}

	public static JPackage getGamePackage() {
		if (gamePackage == null) {
			gamePackage = jcm._package(gamePackageName);
		}
		return gamePackage;
	}

	/**
	 * Devuelve el nombre de la familia, si no se encuentra Se asume que la
	 * llave es la misma familia.
	 * 
	 * @param key
	 * @return
	 */
	public static String getFamilyByComponent(String key) {
		final String family = familyByComponent.get(key);
		return (family == null) ? key : family;
	}

	public static void setFamilyComponents(String key, String value) {
		familyByComponent.put(key, value);
	}
}
