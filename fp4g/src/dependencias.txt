¿Como hacer más generales e modificables las dependencias de las clases?
Es evidente que las clases necesitan de otras adicionales para funcionar. Estás cosas extras hacen que el generador de
de los codigos sea más engorroso y dificil de programar. Entonces ¿Como lo haré para que esto funcione?
Lo primero que se me ocurre es que debe crearse la clase Dependencia, pero a diferencia de la anterior esta debe funcionar a 
la par con JavaCodeModel. A que me refiero con esto, me refiero que idealmente la clase dependencia deberia preparar la clase
JavaCodeModel y no estar dentro de la clase como la vez anterior.

¿Que tiene JavaCodeModel?
-Imports:TreeSet<String>
-pckg: String
-javadoc: String
-name: String

¿Es realmente esto suficiente?
No porque no considera, las funciones a crea, tampoco los objetos necesarios requeridos.
Entonces ¿Tendré que crear plantillas más generales? NO, aumentará la complejidad y te costará más.
Entonces que? Lo mejor es verlo desde otro punto de vista.
¿Que debe tener Dependency?
-Imports:List<String>  una lista de imports necesarios.
-Fields:List<Field> Una lista de campos.(Field explicado más adelante)
-Params:List<Expresion> Una lista de parametros. Necesarios para la invocación.
-Preinit:List<String> Una lista de cosas para hacer antes de crear algo
-preupdate-postupdae: Solo para los managers.

Field: Tipo, nombre, valor inicial o por defecto. 
Ahora que tengo esa pequeña lista.
¿Que debe hacer dependency?
Lo más facil es modificar la lista de imports agregando más imports.
Talvez, tenga que desarrollar distintos Dependency y distinto Models.
Cada uno modificará el que estime conveniente.
Ahora si fuese así, significaria que existirian distintos modelos y no necesariamente serian
archivos.
