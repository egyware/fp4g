:::0.1.26 (prototipo)
+ Ahora en el launcher (FP4GRunner) lee un archivo de configuración  en donde encuentra las propiedades del juego a cargar.
B Cuando no encuentra un mensaje deberia abortar y no caerse.
P Falta especificar cuando el mensaje va para otra entidad.
P Ordenar el codigo de OnModel tiene demasiadas responsabilidades
P Debe quedar prueba de tontos, se ha mejorado con la mejora del launcher.
P Falta la capacidad de ordenar los managers según prioridad
P Definir la utilidad de la clase Utils: Talvez cambiarle el nombre a Assets y mantener los punteros de los assets.
P Hacer que los Managers envien mensaje

:::0.1.25 (prototipo)
+ Se agregaron los metodos Init y Deinit del mensaje Entity, el nombre puede ser confuso pero indica cuando inicializa una entidad.
+ Las variables de entrada se comparten solo con el mensaje Init.
+ Los CircleBody se están moviendo gracias a una combinación de Init y Send
B Cuando no encuentra un mensaje deberia abortar y no caerse.
P Falta especificar cuando el mensaje va para otra entidad.
P Ordenar el codigo de OnModel tiene demasiadas responsabilidades
P Debe quedar prueba de tontos, se ha mejorado con la mejora del launcher.
P Falta la capacidad de ordenar los managers según prioridad
P Definir la utilidad de la clase Utils: Talvez cambiarle el nombre a Assets y mantener los punteros de los assets.
P Hacer que los Managers envien mensaje

:::0.1.24 (prototipo)
+ Se añadio SetShot y SetDelayShot
+ Se añadio los behaviors BoxBodyBehavior y CircleBodyBehavior
+ Se actualizo el ejemplo, ahora se pueden destruir asteroides
+ Ya no es necesario al agregar behaviors agregarle el sufijo Behavior, el generador los agrega automaticamente y ahora en adelante es obligatorio que los behaviors tengan el sufijo "Behaviors"
+ Ahora busca el JDK y guarda en un archivo de propiedades donde se encuentra la carpeta del JDK para no volverlo a buscar
+ Prototipado: Ahora los componentes se pueden agrupar en Apollo lo cual también implica que FP4G sabe donde buscarlos.
F Arreglando algunos bugs cuando se especifica el metodo del filtro solamente
B Los CircleBody no se están moviendo
B Cuando no encuentra un mensaje deberia abortar y no caerse.
P Falta especificar cuando el mensaje va para otra entidad.
P Ordenar el codigo de OnModel tiene demasiadas responsabilidades
P Debe quedar prueba de tontos, se ha mejorado con la mejora del launcher.
P Falta la capacidad de ordenar los managers según prioridad
P Definir la utilidad de la clase Utils: Talvez cambiarle el nombre a Assets y mantener los punteros de los assets.
P Hacer que los Managers envien mensaje

:::0.1.23 (prerelease-prototipo)
+ Compilación casi mejorada, ahora no se cae al no encontrar un JDK, sin embargo no busca si existen JDK instaladas en el sistema.
P Mejorar las bibliotecas, se me ocurrio una forma muy util para evitar que las bibliotecas se comporten como defines, solo para dar una distinción clara.
P Falta especificar cuando el mensaje va para otra entidad.
P Ordenar el codigo de OnModel tiene demasiadas responsabilidades
P Debe quedar prueba de tontos
P Falta la capacidad de ordenar los managers según prioridad
P Definir la utilidad de la clase Utils: Talvez cambiarle el nombre a Assets y mantener los punteros de los assets.
P Hacer que los Managers envien mensaje

:::0.1.22 (prerelease-prototipo)
+ Se mejoró el Runner, ahora se ejecuta usando "java -jar Runner path class"
+ Bibliotecas agregadas, solo hay que aprovecharlas.
P Mejorar la compilación, hasta ahora se cae si no encuentra un JDK valido.
P Falta especificar cuando el mensaje va para otra entidad.
P Ordenar el codigo de OnModel tiene demasiadas responsabilidades
P Debe quedar prueba de tontos
P Falta la capacidad de ordenar los managers según prioridad
P Definir la utilidad de la clase Utils: Talvez cambiarle el nombre a Assets y mantener los punteros de los assets.
P Hacer que los Managers envien mensaje

:::0.1.22 (prerelease-prototipo)
+ La instrucción using fue agregada (en la versión anterior, pero se me olvido anotarla)
* Prototipando bibliotecas. Se sigue prototipando las bibliotecas, se ha mejorado un poco el manejo de dependencias en EntityGenerator.
P Falta especificar cuando el mensaje va para otra entidad.
P Ordenar el codigo de OnModel tiene demasiadas responsabilidades
P Debe quedar prueba de tontos
P Falta la capacidad de ordenar los managers según prioridad
P Definir la utilidad de la clase Utils: Talvez cambiarle el nombre a Assets y mantener los punteros de los assets.
P Hacer que los Managers envien mensaje

:::0.1.21 (prerelease-prototipo)
+ Mini manual de uso (-h)
+ Mejorando los assets, ahora es sintax sugar de DEFINE/ADD ASSETS
+ Parametros por defecto añadidos.
+ Se puede evaluar la expresión BinaryOp
F En el generador ya no se hace diferencia entre Entero y Decimal simplemente es Numero (Number)
F Se han mejorados las dependencias, para ello se utiliza los datos especificados en la biblioteca.
* Prototipando bibliotecas.
P Falta especificar cuando el mensaje va para otra entidad.
P Ordenar el codigo de OnModel tiene demasiadas responsabilidades
P Debe quedar prueba de tontos
P Falta la capacidad de ordenar los managers según prioridad
P Definir la utilidad de la clase Utils: Talvez cambiarle el nombre a Assets y mantener los punteros de los assets.
P Hacer que los Managers envien mensaje
P falta agregar la instruccion Using

:::0.1.20 (prerelease-prototipo)
+ Se consideran los parametros en los mensajes que se envian.
+ Separado, ahora se generan en la biblioteca común de funciones.
+ Semi definido, por lo menos va send.
+ Ahora las expresiones se evaluan por si misma (Dado un cierto define)
+ Keywords añadidas parent y current para acceder a las variables de los defines.
* Prototipando bibliotecas.
B Problemas con la biblioteca y message depend.
P Ordenar el codigo para recibir parametros y talvez más adelante definir parametros por defecto.
P Falta especificar cuando el mensaje va para otra entidad.
P Ordenar el codigo OnModel tiene demasiadas responsabilidades
P Debe quedar prueba de tontos
P Falta la capacidad de ordenar los managers según prioridad
P Definir la utilidad de la clase Utils: Talvez cambiarle el nombre a Assets y mantener los punteros de los assets.
P Hacer que los Managers envien mensaje
P falta agregar la instruccion Using

:::0.1.19 (prerelease-prototipo)
+ Ejecuta el codigo! Gracias al proyecto Runner
+ Se distribuyó la responsabilidad del FP4GDataVisitor, ahora existe un FP4GExpresionVisitor que se encarga de extraer solo las expresiones.
+ Si una entidad necesita escuchar eventos del teclado y es añadida mediante add, se le agrega al inputProcesor del sistema.
+ Mejoras para la instruccion set, cuando se utiliza objetos beans.
+ Las opciones de compilación son más generales y más automaticas, ahora se crean dos directorios src, build.
+ Las clases compiladas ahora quedan en la carpeta build.
P Falta separar el generador de instrucciones del generador de entidad.
P Falta especificar cuando el mensaje va para otra entidad.
P Ordenar el codigo OnModel tiene demasiadas responsabilidades
P Falta definir que codigo va ir en las sentencias.
P Debe quedar prueba de tontos
P Ordenar el codigo para recibir parametros y talvez más adelante definir parametros por defecto.
P Falta la capacidad de ordenar los managers según prioridad
P Definir la utilidad de la clase Utils: Talvez cambiarle el nombre a Assets y mantener los punteros de los assets.
P Hacer que los Managers envien mensaje
P falta agregar la instruccion Using

:::0.1.18 (prerelease-prototipo)
+ Se cambio el modelo de datos de los eventos.
+ ¡Eventos! Ahora se pueden crear los eventos. Sin embargo falta definir el codigo que llevará entre los corchetes.
+ Se puede utilizar las instrucciones Send
F No se pueden encontrar las dependendencias correctamente de los eventos.
B Ejecute el codigo
P Falta especificar cuando el mensaje va para otra entidad.
P Ordenar el codigo OnModel tiene demasiadas responsabilidades
P Hacer que el juego utilize realmente el nuevo sistema de mensajes (si alguien se pone a la escucha de los mensajes Key, que agrege el codigo para setear el)
P Falta definir que codigo va ir en las sentencias.
P Debe quedar prueba de tontos
P Ordenar el codigo para recibir parametros y talvez más adelante definir parametros por defecto.
P Falta la capacidad de ordenar los managers según prioridad
P Definir la utilidad de la clase Utils: Talvez cambiarle el nombre a Assets y mantener los punteros de los assets.
P Hacer más generales las opciones de compilación automatica.
P Hacer que las clases compiladas queden en el otro lugar.
P Hacer que los Managers envien mensaje
P falta agregar la instruccion Using

:::0.1.17 (prerelease-prototipo)
+ Se reemplateo el asunto de los assets, ahora se deberá especificar en que GameState cargarlos.
+ Se agregaron las clases Asset y Assets que modelan y almacenan los datos la instrucción Assets. Se actualizo AssetModel para el template.
+ Se requieren minimos cambios para que funcione, de hecho sin usar los eventos funciona correctamente.
+ GetAssets Eliminado por la instrucción Assets.
B No se pueden encontrar las dependendencias correctamente de los eventos.
B Ejecute el codigo
P Se descarta la idea de usar templates durante runtime, se cambia a templates antes de parsear. Utilizando freemaker para ello.
P Los eventos no están funcionando correctamente. Aplicar patron de las otras implementacion par Clase Data/Model
P Debe quedar prueba de tontos
P Ordenar el codigo para recibir parametros y talvez más adelante definir parametros por defecto.
P Falta definir que codigo va ir en las sentencias.
P Falta la capacidad de ordenar los managers según prioridad
P Definir la utilidad de la clase Utils: Talvez cambiarle el nombre a Assets y mantener los punteros de los assets.
P Hacer más generales las opciones de compilación automatica.
P Hacer que las clases compiladas queden en el otro lugar.
P Hacer que los Managers envien mensaje
P falta agregar la instruccion Using
:::0.1.16 (prototipo)
+ Ahora se agregan las dependencias de los assets(Prototipado)
+ Se quito loadAssets, ahora se implementará nativamente en el generador, con la ayuda de la clase AssetModel y Depend
+ Se reorganizo el codigo para generar, haciendo este más modular y menos cohesionado.
B Se requieren cambios minimos para hacer que funcione el sistema.
B Funciones getAssets, no pueden cargar automaticamente los assets, no hay forma de agregarlos previamente.
P Talvez replantear el tema de los assets, el problema es que no puede saber con exactitud donde y cuando se van a usar.
P Ordenar el codigo para recibir parametros y talvez más adelante definir parametros por defecto.
P Ejecute el codigo
P Falta definir que codigo va ir en las sentencias.
P Falta la capacidad de ordenar los managers según prioridad
P Definir la verdadera utilidad de la clase Utils y no la parche de ahora.
P Hacer más generales las opciones de compilación automatica.
P Hacer que las clases compiladas queden en el otro lugar.
P Hacer que los Managers envien mensaje
P falta agregar la instruccion Using
:::0.1.15 (prototipo)
+ Instrucción Start agregada.
+ Clase modelo del parametro agregada
B Se requieren cambios minimos para hacer que funcione el sistema.
B Funciones getAssets, no pueden cargar automaticamente los assets, no hay forma de agregarlos previamente.
P Ordenar el codigo para recibir parametros y talvez más adelante definir parametros por defecto.
P Ejecute el codigo
P Falta definir que codigo va ir en las sentencias.
P Falta la capacidad de ordenar los managers según prioridad
P Definir la verdadera utilidad de la clase Utils y no la parche de ahora.
P Hacer más generales las opciones de compilación automatica.
P Hacer que las clases compiladas queden en el otro lugar.
P Hacer que los Managers envien mensaje
P falta agregar la instruccion Using
:::0.1.14 (prototipo)
+ Instrucción Start agregada.
+ Clase modelo del parametro agregada
B Se requieren cambios minimos para hacer que funcione el sistema.
P Ordenar el codigo para recibir parametros y talvez más adelante definir parametros por defecto.
P Ejecute el codigo
P Falta definir que codigo va ir en las sentencias.
P Falta la capacidad de ordenar los managers según prioridad
P Definir la verdadera utilidad de la clase Utils y no la parche de ahora.
P Hacer más generales las opciones de compilación automatica.
P Hacer que las clases compiladas queden en el otro lugar.
P Hacer que los Managers envien mensaje
P falta agregar la instruccion Using
:::0.1.13 (prototipo)
+ Parametros agregados a GameState
F Se parcho gran parte del codigo para poder agregar el necesario para que funcionen correctamente los managers, sin embargo aún queda harto camino por recorrer para la ejecución automatica.
B Se requieren cambios minimos para hacer que funcione el sistema.
P Falta definir que codigo va ir en las sentencias.
P Falta la capacidad de ordenar los managers según prioridad
P Definir la verdadera utilidad de la clase Utils y no la parche de ahora.
P Ejecute el codigo
P Hacer más generales las opciones de compilación automatica.
P Hacer que las clases compiladas queden en el otro lugar.
P Hacer que los Managers envien mensaje
P falta agregar el objeto start
P falta agregar la instruccion Using
:::0.1.12 (prototipo)
+ Agregar los managers
+ Hay una clase que representa el codigo antes de ser compilado, por ahora es bastante simple y da mucha utildad a la hora de agregar imports
+ Se puede agregar imports en las funciones, para eso se tiene una nueva clase que encapsula el contenido a generar.
+ Gracias a la clase que modela el codigo modelo del codigo los imports son más automaticos.
+ Hacer que compile automaticamente.
B se requieren todavía muchos cambios para que funcione el sistema.
P Falta definir que codigo va ir en las sentencias.
P Falta la capacidad de ordenar los managers según prioridad
P Definir la verdadera utilidad de la clase Utils y no la parche de ahora.
P Ejecute el codigo
P Hacer más generales las opciones de compilación automatica.
P Hacer que las clases compiladas queden en el otro lugar.
P Hacer que los Managers envien mensaje
P Falta agregarle los parametros a Gameloop
P falta agregar el objeto start
P falta agregar la instruccion Using
:::0.1.11 (prototipo)
+ SimpleBodyBehavior añadido más las funciones createCircle(radio), createBox(ancho,alto)
+ Muchos cambios no registrados entre la versión 10 y 11
+ Cambio de parser de JavaCC a ANTLR
+ Se agregaron tipos de variables como el codigo directo.
+ Se incluyeron operadores basicos como +-/* entre otros.
+ Se la palabra clave "On Message" que procesa los eventos de entrada a la entidad.
+ Se pueden invocar funciones preestablecidas.
+ Ya no se utiliza la entidad por defecto, si no una entidad autogenerada. Se sigue utilizando el EntityBuilder aún.
+ Se cambio la estructura de las clases que definen el juego.
B se requieren todavía muchos cambios para que funcione el sistema.
P agregar un objeto que represente el codigo antes de ser compilado. (lista con los imports, el nombre de la clase, la plantillad de freemarker, metodos, etc...)
P Agregar los managers
P imports más automaticos
P Imports para funciones? es probable que se requiera una clase pre-recurso
P Definir la verdadera utilidad de la clase Utils y no la parche de ahora.
P Hacer que compile automaticamente y ejecute el codigo
P Hacer más generales las opciones de compilación automatica.
P Hacer que las clases compiladas queden en el otro lugar.
P Hacer que los Managers envien mensaje
P Falta agregarle los parametros a Gameloop
P falta agregar el objeto start
:::0.1.10 (prototipo)
+ Permite Estados personalizados (definidos fuera del generador) para usarlos debe usar Add State CustomNameState
+ Se agregaron más funciones getSound,getMusic,getTexture todas variantes de getSprite
F El generador no puede deducir el orden de los sistemas
C Se realizo un cambio interno para mejorar la forma que se muestran los mensajes de error/advertencia/información
C Ahora loadState realiza unload en el metodo unload de la clase actual.
P Hacer que los Managers envien mensajes
P falta los operadores +-/* etc.. etc..
P las demas operaciones
:::0.1.9 (prototipo)
+ Si no se especifica el componente a crear, el generador asume que existe.
+ Ya no depende del proyecto a crear, para detectar los componentes. Sin embargo se pueden agregar componentes inexistentes.
C Algunas clases y variables generadas que pasaron a ser finals con motivos de optimización de lo compilado además que no requieren ser modificadas a lo largo de la ejecución de programa
B El generador no puede deducir el orden de los sistemas, se dejo un mensaje para establecerlo manualmente
P Hacer que los Managers envien mensajes
P falta los operadores +-/* etc.. etc..
P las demas operaciones
:::0.1.8 (prototipo)
+ Ahora se puede invocar desde la linea de comandos
- Se quito de Apollo la posibilidad que un Entity pase de activo/inactivo
B El generador no puede deducir el orden de los sistemas, se dejo un mensaje para establecerlo manualmente
P Hacer que los Managers envien mensajes
P falta los operadores +-/* etc.. etc..
P las demas operaciones
:::0.1.7 (prototype)
+ Se agrego la posibilidad de hacer bloques inline, que hace más legible el codigo cuando se desea establecer un valor a algo que tiene una profundidad mayor
B El generador no puede deducir el orden de los sistemas, se dejo un mensaje para establecerlo manualmente
P Para el engine, detectar que Entity está activo o nó esto puede ser manual atravez de un mensaje
P Hacer que los Managers envien mensajes
P falta los operadores +-/* etc.. etc..
P las demas operaciones
:::0.1.6 (prototype)
+ Se pueden modificar los valores publicos de ciertos componentes 
+ Se agregaron funciones, sin embargo estás funcionan como parches al lenguaje (hasta ahora)
+ Al engine, se agrego el Asset Sprite además la funcion que permite cargarlos loadAssets y getSprite
+ Asset Manager agregado y puesto globalmente en la clase <NombreJuego>
F Se le quito responsabilidades a World(Apollo) para que la actualición de sistemas o managers fuese encargado el GameState
F Actualmente el generador puede generar las modifaciones que se realizaron para las primeras pruebas
F Para Apollo se puede establecer externamente un EntityManager
B El generador no puede deducir el orden de los sistemas, se dejo un mensaje para establecerlo manualmente
P Para el engine, detectar que Entity está activo o nó esto puede ser manual atravez de un mensaje
P Hacer que los Managers envien mensajes
P falta los operadores +-/* etc.. etc..
P las demas operaciones
:::0.1.5 (prototype)
+ Se agrego al engine capacidad de leer una animación
B los Entity por defecto no se actualizan
B Se probo el prototipo, pero le faltaban cosas por agregar
B Apollo ya tiene por defecto agregado un EntityManager
P Para el engine, detectar que Entity está activo o nó esto puede ser manual atravez de un mensaje
P Hacer que los Managers envien mensajes
P un Asset Manager
P falta los operadores +-/* etc.. etc..
P detectar funciones
P las demas operaciones
:::0.1.4 (prototype)
C Se corrigieron algunos detalles, ya se está generando codigo para los componentes...
C Se agrego Apollo al proyecto, que tiene un gran de cosas definidas
P falta los operadores +-/* etc.. etc..
P detectar funciones
P las demas operaciones
:::0.1.3 (prototype)
C Si no se define nada en Define/Add de un sistema especifico ya no se genera el objeto Def
C Se dividio la clase Generator, en State y Entity Generator para aumentar la mantención del software
P falta los operadores +-/* etc.. etc..
P detectar funciones
P las demas operaciones
:::0.1.2 (prototype)
+ Se prototipo mostrar mensajes de errores, sin embargo aún quedan muuchos pendientes...
+ Se orden las definiciones según prioridad
+ Se agrega la funcionalidad ADD/DEFINE ENTITY
C se cambiaron algunas keywords GAMEOBJECT por ENTITY y COMPONENT por BEHAVIOR
P falta los operadores +-/* etc.. etc..
P detectar funciones
P las demas operaciones
:::0.1.1 (prototype)
+ START agregado como una nueva sentencia
+ prototipar la generación (ADD SYSTEM/DEFINE STATE/START)
F Ahora define dejará de ser global a pasar ser local...
F Bugs corregidos a la hora de sobreescribir el define y el add
P ordenar los sistemas por orden de prioridad
P falta los operadores +-/* etc.. etc..
P detectar funciones
P las demas operaciones
:::0.1 (prototype)
+ Objetos prototipos [ values ] funcionado
+ DEFINE GAME [...] funcionando
+ variables funcionando
+ literales bool, int, decimal, string funcionando
+ ADD/DEFINE prototipados, otros por agregar
P falta los operadores +-/* etc.. etc..
P detectar funciones
P las demas operaciones
P prototipar la generación

